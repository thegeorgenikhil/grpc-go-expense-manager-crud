// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: proto/expense.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ExpenseServiceClient is the client API for ExpenseService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ExpenseServiceClient interface {
	GetExpenses(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*Expenses, error)
	GetExpense(ctx context.Context, in *ExpenseId, opts ...grpc.CallOption) (*Expense, error)
	AddExpense(ctx context.Context, in *ExpenseInfo, opts ...grpc.CallOption) (*Expense, error)
	UpdateExpense(ctx context.Context, in *UpdateExpenseReq, opts ...grpc.CallOption) (*ExpenseStatusResponse, error)
	DeleteExpense(ctx context.Context, in *ExpenseId, opts ...grpc.CallOption) (*ExpenseStatusResponse, error)
}

type expenseServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewExpenseServiceClient(cc grpc.ClientConnInterface) ExpenseServiceClient {
	return &expenseServiceClient{cc}
}

func (c *expenseServiceClient) GetExpenses(ctx context.Context, in *NoParam, opts ...grpc.CallOption) (*Expenses, error) {
	out := new(Expenses)
	err := c.cc.Invoke(ctx, "/expense_service.ExpenseService/GetExpenses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) GetExpense(ctx context.Context, in *ExpenseId, opts ...grpc.CallOption) (*Expense, error) {
	out := new(Expense)
	err := c.cc.Invoke(ctx, "/expense_service.ExpenseService/GetExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) AddExpense(ctx context.Context, in *ExpenseInfo, opts ...grpc.CallOption) (*Expense, error) {
	out := new(Expense)
	err := c.cc.Invoke(ctx, "/expense_service.ExpenseService/AddExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) UpdateExpense(ctx context.Context, in *UpdateExpenseReq, opts ...grpc.CallOption) (*ExpenseStatusResponse, error) {
	out := new(ExpenseStatusResponse)
	err := c.cc.Invoke(ctx, "/expense_service.ExpenseService/UpdateExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *expenseServiceClient) DeleteExpense(ctx context.Context, in *ExpenseId, opts ...grpc.CallOption) (*ExpenseStatusResponse, error) {
	out := new(ExpenseStatusResponse)
	err := c.cc.Invoke(ctx, "/expense_service.ExpenseService/DeleteExpense", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExpenseServiceServer is the server API for ExpenseService service.
// All implementations must embed UnimplementedExpenseServiceServer
// for forward compatibility
type ExpenseServiceServer interface {
	GetExpenses(context.Context, *NoParam) (*Expenses, error)
	GetExpense(context.Context, *ExpenseId) (*Expense, error)
	AddExpense(context.Context, *ExpenseInfo) (*Expense, error)
	UpdateExpense(context.Context, *UpdateExpenseReq) (*ExpenseStatusResponse, error)
	DeleteExpense(context.Context, *ExpenseId) (*ExpenseStatusResponse, error)
	mustEmbedUnimplementedExpenseServiceServer()
}

// UnimplementedExpenseServiceServer must be embedded to have forward compatible implementations.
type UnimplementedExpenseServiceServer struct {
}

func (UnimplementedExpenseServiceServer) GetExpenses(context.Context, *NoParam) (*Expenses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpenses not implemented")
}
func (UnimplementedExpenseServiceServer) GetExpense(context.Context, *ExpenseId) (*Expense, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetExpense not implemented")
}
func (UnimplementedExpenseServiceServer) AddExpense(context.Context, *ExpenseInfo) (*Expense, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddExpense not implemented")
}
func (UnimplementedExpenseServiceServer) UpdateExpense(context.Context, *UpdateExpenseReq) (*ExpenseStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateExpense not implemented")
}
func (UnimplementedExpenseServiceServer) DeleteExpense(context.Context, *ExpenseId) (*ExpenseStatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteExpense not implemented")
}
func (UnimplementedExpenseServiceServer) mustEmbedUnimplementedExpenseServiceServer() {}

// UnsafeExpenseServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ExpenseServiceServer will
// result in compilation errors.
type UnsafeExpenseServiceServer interface {
	mustEmbedUnimplementedExpenseServiceServer()
}

func RegisterExpenseServiceServer(s grpc.ServiceRegistrar, srv ExpenseServiceServer) {
	s.RegisterService(&ExpenseService_ServiceDesc, srv)
}

func _ExpenseService_GetExpenses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NoParam)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).GetExpenses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense_service.ExpenseService/GetExpenses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).GetExpenses(ctx, req.(*NoParam))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_GetExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpenseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).GetExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense_service.ExpenseService/GetExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).GetExpense(ctx, req.(*ExpenseId))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_AddExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpenseInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).AddExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense_service.ExpenseService/AddExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).AddExpense(ctx, req.(*ExpenseInfo))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_UpdateExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateExpenseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).UpdateExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense_service.ExpenseService/UpdateExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).UpdateExpense(ctx, req.(*UpdateExpenseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExpenseService_DeleteExpense_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExpenseId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExpenseServiceServer).DeleteExpense(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/expense_service.ExpenseService/DeleteExpense",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExpenseServiceServer).DeleteExpense(ctx, req.(*ExpenseId))
	}
	return interceptor(ctx, in, info, handler)
}

// ExpenseService_ServiceDesc is the grpc.ServiceDesc for ExpenseService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ExpenseService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "expense_service.ExpenseService",
	HandlerType: (*ExpenseServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetExpenses",
			Handler:    _ExpenseService_GetExpenses_Handler,
		},
		{
			MethodName: "GetExpense",
			Handler:    _ExpenseService_GetExpense_Handler,
		},
		{
			MethodName: "AddExpense",
			Handler:    _ExpenseService_AddExpense_Handler,
		},
		{
			MethodName: "UpdateExpense",
			Handler:    _ExpenseService_UpdateExpense_Handler,
		},
		{
			MethodName: "DeleteExpense",
			Handler:    _ExpenseService_DeleteExpense_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/expense.proto",
}
