// for syntax highlighting we use proto3 version
syntax="proto3";

// path to our current folder, where the generated files will be placed
option go_package = "github.com/thegeorgenikhil/grpc-go-expense-manager-crud/proto";

// package name for our proto file
package expense_service;

// defining all the Services for the gRPC
service ExpenseService {
    rpc GetExpenses(NoParam) returns (Expenses);
    rpc GetExpense(ExpenseId) returns (Expense);
    rpc AddExpense(ExpenseInfo) returns (Expense);
    rpc UpdateExpense(UpdateExpenseReq) returns (ExpenseStatusResponse);
    rpc DeleteExpense(ExpenseId) returns (ExpenseStatusResponse);
}

// when you are not passing any params still you will need to add a type
// NoParam acts as a type for no parameters given.
message NoParam {};

// Defining the Expense Type 

// What are these numbers ?

// Field numbers are an important part of Protobuf. They're used to identify fields in the binary encoded data, which means they can't change from version to version of your service. The advantage is that backward compatibility and forward compatibility are possible. Clients and services will ignore field numbers that they don't know about, as long as the possibility of missing values is handled.

// In the binary format, the field number is combined with a type identifier. Field numbers from 1 to 15 can be encoded with their type as a single byte. Numbers from 16 to 2,047 take 2 bytes. You can go higher if you need more than 2,047 fields on a message for any reason. The single-byte identifiers for field numbers 1 to 15 offer better performance, so you should use them for the most basic, frequently used fields.

message Expense {
    string id = 1;
    string title = 2;
    float amount = 3;
    int64 timestamp = 4;
}

// repeated stands for when we are sending an array of that particular type
// in this case it stands for an expenses array
message Expenses {
    repeated Expense expenses = 1;
}

message ExpenseId {
    string id = 1;
}

message ExpenseInfo {
    string title = 1;
    float amount = 2;
}

message ExpenseStatusResponse {
    int32 status = 1;
    string id = 2;
}

message UpdateExpenseReq {
    string id = 1;
    string title = 2;
    float amount = 3;
}







